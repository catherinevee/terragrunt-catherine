name: Terraform Apply

on:
  push:
    branches: [ main ]
    paths:
      - 'eu-west-1/**'
      - '.github/workflows/terraform-apply.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      auto_approve:
        description: 'Auto approve changes'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.13.0"
  TERRAGRUNT_VERSION: "0.84.0"
  AWS_REGION: "eu-west-1"

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment || 'main' }}
  cancel-in-progress: false

jobs:
  terraform-apply:
    name: Terraform Apply - ${{ github.event.inputs.environment || 'main' }}
    runs-on: ubuntu-latest
    
    # Environment protection for production
    environment:
      name: ${{ github.event.inputs.environment || 'prod' }}
      url: ${{ steps.apply.outputs.apply_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformApply
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.0.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
      
      - name: Terraform Init
        id: init
        run: |
          cd eu-west-1
          terragrunt run-all init --terragrunt-non-interactive
      
      - name: Terraform Plan
        id: plan
        run: |
          cd eu-west-1
          terragrunt run-all plan \
            --terragrunt-non-interactive \
            --terragrunt-log-level INFO \
            -out=tfplan
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'prod' }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
      
      - name: Terraform Apply
        id: apply
        run: |
          cd eu-west-1
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            terragrunt run-all apply \
              --terragrunt-non-interactive \
              --terragrunt-log-level INFO \
              -auto-approve
          else
            terragrunt run-all apply \
              --terragrunt-non-interactive \
              --terragrunt-log-level INFO \
              tfplan
          fi
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'prod' }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
      
      - name: Upload Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ github.run_number }}
          path: eu-west-1/.terragrunt-cache/
          retention-days: 30
      
      - name: Notify Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'prod' }}';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            const message = `✅ **Terraform Apply Successful**\n\n` +
              `**Environment:** ${environment}\n` +
              `**Triggered by:** ${context.actor}\n` +
              `**Commit:** ${context.sha.substring(0, 7)}\n` +
              `**Workflow:** [View Run](${runUrl})\n\n` +
              `Infrastructure has been successfully deployed to ${environment}.`;
            
            // Create deployment notification
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              description: `Terraform deployment to ${environment}`,
              auto_merge: false,
              required_contexts: []
            });
      
      - name: Notify Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'prod' }}';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            const message = `❌ **Terraform Apply Failed**\n\n` +
              `**Environment:** ${environment}\n` +
              `**Triggered by:** ${context.actor}\n` +
              `**Commit:** ${context.sha.substring(0, 7)}\n` +
              `**Workflow:** [View Run](${runUrl})\n\n` +
              `Please check the workflow logs for details and take immediate action.`;
            
            // Send notification to appropriate channels
            console.log(message); 