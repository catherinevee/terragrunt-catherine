name: Security Scan

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'eu-west-1/**'
      - '.github/workflows/security-scan.yml'
  push:
    branches: [ main ]
    paths:
      - 'eu-west-1/**'
      - '.github/workflows/security-scan.yml'
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  TF_VERSION: "1.13.0"
  TERRAGRUNT_VERSION: "0.84.0"

permissions:
  contents: read
  security-events: write
  pull-requests: write
  id-token: write

jobs:
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.0.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
      
      - name: Terraform Init
        run: |
          cd eu-west-1
          terragrunt run-all init --terragrunt-non-interactive
      
      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: eu-west-1
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
      
      - name: Upload Checkov SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
      
      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0
      
      - name: TFLint Check
        run: |
          cd eu-west-1
          tflint --init
          tflint --format=compact
        continue-on-error: true
      
      - name: Run Trivy Infrastructure Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'eu-west-1'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-vuln-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy Vulnerability SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-vuln-results.sarif
      
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'terragrunt-catherine'
          path: '.'
          format: 'SARIF'
          out: 'owasp-results.sarif'
          args: >
            --failOnCVSS 7
            --enableRetired
      
      - name: Upload OWASP SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: owasp-results.sarif

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.0.0
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
      
      - name: Terraform Init
        run: |
          cd eu-west-1
          terragrunt run-all init --terragrunt-non-interactive
      
      - name: Run Terraform Compliance
        uses: terraform-compliance/cli@v1.3.0
        with:
          features: '.github/compliance/'
          plan_file: 'eu-west-1/tfplan'
          tf_plan: true
        continue-on-error: true
      
      - name: Run Open Policy Agent
        uses: open-policy-agent/conftest-action@v3
        with:
          policy: .github/policies/
          files: eu-west-1/
          fail-on: WARN
        continue-on-error: true

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [terraform-security, dependency-scan, compliance-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download SARIF files
        uses: actions/download-artifact@v4
        with:
          pattern: '*.sarif'
          merge-multiple: true
      
      - name: Generate Security Summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let summary = '# üîí Security Scan Report\n\n';
            summary += `**Scan Date:** ${new Date().toISOString()}\n`;
            summary += `**Repository:** ${context.repo.owner}/${context.repo.repo}\n`;
            summary += `**Branch:** ${context.ref}\n\n`;
            
            // Check for SARIF files and analyze results
            const sarifFiles = ['checkov-results.sarif', 'trivy-results.sarif', 'trivy-vuln-results.sarif', 'owasp-results.sarif'];
            let totalIssues = 0;
            let criticalIssues = 0;
            let highIssues = 0;
            
            sarifFiles.forEach(file => {
              if (fs.existsSync(file)) {
                try {
                  const sarifData = JSON.parse(fs.readFileSync(file, 'utf8'));
                  const runs = sarifData.runs || [];
                  
                  runs.forEach(run => {
                    const results = run.results || [];
                    results.forEach(result => {
                      totalIssues++;
                      const level = result.level || 'warning';
                      if (level === 'error') criticalIssues++;
                      if (level === 'warning') highIssues++;
                    });
                  });
                } catch (error) {
                  console.log(`Error parsing ${file}:`, error.message);
                }
              }
            });
            
            summary += `## üìä Scan Summary\n\n`;
            summary += `- **Total Issues Found:** ${totalIssues}\n`;
            summary += `- **Critical Issues:** ${criticalIssues}\n`;
            summary += `- **High Issues:** ${highIssues}\n\n`;
            
            if (criticalIssues > 0) {
              summary += `‚ö†Ô∏è **CRITICAL SECURITY ISSUES DETECTED**\n\n`;
              summary += `Please review and address critical security findings immediately.\n\n`;
            } else if (highIssues > 0) {
              summary += `‚ö†Ô∏è **HIGH PRIORITY ISSUES DETECTED**\n\n`;
              summary += `Please review high priority security findings.\n\n`;
            } else {
              summary += `‚úÖ **No critical or high priority issues detected.**\n\n`;
            }
            
            summary += `## üìã Next Steps\n\n`;
            summary += `1. Review the detailed scan results in the Security tab\n`;
            summary += `2. Address any critical or high priority findings\n`;
            summary += `3. Update security policies if needed\n`;
            summary += `4. Re-run scans after fixes are implemented\n\n`;
            
            summary += `---\n*This report was generated automatically by GitHub Actions.*`;
            
            // Write report to file
            fs.writeFileSync('security-report.md', summary);
            
            // Comment on PR if this is a pull request
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.md
          retention-days: 90 